version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.4
  kubernetes: circleci/kubernetes@1.0.2

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1

# INSTALL  DEPENDENCIES
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_docker_compose_cli:
    description: Install Docker Compose CLI
    steps:
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose


# DESTROY ENVIRONMENTS
  destroy_vpc_stack_environment:
    description: Destroy VPC cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name wordpress-vpc-stack-<< parameters.workflow_id >>

  destroy_rds_stack_environment:
    description: Destroy RDS cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name wordpress-rds-stack-<< parameters.workflow_id >>

  destroy_eks_stack_environment:
    description: Destroy EKS cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name wordpress-eks-stack-<< parameters.workflow_id >>

jobs:
  syntax_validation:
    docker:
      - image: circleci/php:7.1-node-browsers
    steps:
      - checkout
      - run: sudo apt update
      - run: sudo docker-php-ext-install zip
      - run:
          name: Run Syntax Validation
          command: |
            set -e

            for file in *.php 
            do
                if ! php -l "$file"; then
                    echo "Syntax error in $file"
                    exit 1
                fi
            done

      - notify_on_failure

# DEPLOY INFRASTRUCTURE
  deploy_vpc_stack:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Provision network infrastructure
          command: |
            aws cloudformation deploy \
              --template-file iac/cloudformation/vpc-stack.yml \
              --tags project=wordpress-project \
              --stack-name "wordpress-vpc-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://iac/cloudformation/vpc-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      # - notify_on_failure
      - destroy_vpc_stack_environment

  deploy_rds_stack:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Provision Database Instance
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file iac/cloudformation/rds-stack.yml \
              --tags project=wordpress-project \
              --stack-name "wordpress-rds-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --parameter-overrides \
                DBInstanceIdentifier=${DB_INSTANCE_IDENTIFIER} \
                DBName=${DB_NAME} \
                MasterUsername=${DB_USERNAME} \
                MasterUserPassword=${DB_PASSWORD}

      # - notify_on_failure
      - destroy_rds_stack_environment

  get_rds_endpoint:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility to have workflow workspace capability
          command: |
            yum install -y tar gzip
      - run:
          name: Get Database Instance Endpoint and save in a vaiable
          command: |
            export DB_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier ${DB_INSTANCE_IDENTIFIER} \
            --query 'DBInstances[*].Endpoint.Address' \
            --output text)

            echo DB_HOST=${DB_ENDPOINT} > .env
            cat .env

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.env

      # - notify_on_failure
      - destroy_rds_stack_environment

  deploy_eks_stack:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Set up Kubernetes Cluster
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file iac/cloudformation/eks-stack.yml \
              --tags project=wordpress-project \
              --stack-name "wordpress-eks-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://iac/cloudformation/eks-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

#       - notify_on_failure
      - destroy_eks_stack_environment

# BUILD APPLICATION
  build_app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_docker_compose_cli
      - install_awscli
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - run:
          name: Start docker-compose and verify service(s)
          command: |
            docker compose up -d
            docker ps

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.env

# TEST APPLICATION
  test_app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_docker_compose_cli
      - install_awscli
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - run :
          name: Vrify if app is reachable using http
          command: |
            PORT=8080
            RETRY_COUNT=0

            while true; do
                curl http://localhost:$PORT
                if [ $? -eq 0 ]; then
                    echo "App is reachable"
                    break
                else
                    RETRY_COUNT=$((RETRY_COUNT+1))
                    if [ $RETRY_COUNT -eq 3 ]; then
                        echo "App is not reachable after $RETRY_COUNT retries. Exiting with error."
                        exit 1
                    else
                        echo "App is not reachable. Waiting 5 seconds before trying again..."
                        sleep 5
                    fi
                fi
            done

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.env

# PUSH APPLICATION TO DOCKER REGISTRY
  push_app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_docker_compose_cli
      - install_awscli
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - run:
          name: Push to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
            docker tag $WORDPRESS_IMAGE:latest $DOCKER_USERNAME/$WORDPRESS_IMAGE
            docker push $DOCKER_USERNAME/$WORDPRESS_IMAGE
           
      # - notify_on_failure

# DEPLOY APPLICATION
  deploy_app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Install kubectl and deloy to AWS EKS
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
            kubectl apply -f operations/wordpress/

            kubectl get deployments -w

      # - notify_on_failure

workflows:
  wordpress-workflow:
    jobs:
      - syntax_validation
      # - deploy_vpc_stack:
      #     requires: [syntax_validation]
      # - deploy_rds_stack:
      #     requires: [deploy_vpc_stack]
      # - get_rds_endpoint:
      #     requires: [deploy_rds_stack]
      # - deploy_eks_stack:
      #     requires: [deploy_vpc_stack]
      # - build_app:
      #     requires: [get_rds_endpoint]
      # - test_app:
      #     requires: [build_app]
      # - push_app:
      #     requires: [test_app, deploy_eks_stack]      
      # # - deploy_app:
      #     requires: [push_app]