version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.4
  kubernetes: circleci/kubernetes@1.0.2
  aws-eks: circleci/aws-eks@0.2.0

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1

# INSTALL  DEPENDENCIES
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_docker_compose_cli:
    description: Install Docker Compose CLI
    steps:
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

  install_kubectl:
    description: Install kubectl and deloy to AWS EKS
    steps:
      - run:
          name: Install kubectl and deloy to AWS EKS
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl


# DESTROY ENVIRONMENTS
  destroy_vpc_stack_environment:
    description: Destroy VPC cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name wordpress-vpc-stack-<< parameters.workflow_id >>

  destroy_rds_stack_environment:
    description: Destroy RDS cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name wordpress-rds-stack-<< parameters.workflow_id >>

  destroy_eks_stack_environment:
    description: Destroy EKS cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name wordpress-eks-stack-<< parameters.workflow_id >>

jobs:
  syntax_validation:
    docker:
      - image: circleci/php:7.1-node-browsers
    steps:
      - checkout
      - run: sudo apt update
      - run: sudo docker-php-ext-install zip
      - run:
          name: Run Syntax Validation
          command: |
            set -e

            for file in *.php 
            do
                if ! php -l "$file"; then
                    echo "Syntax error in $file"
                    exit 1
                fi
            done

      - notify_on_failure

# DEPLOY INFRASTRUCTURE
  deploy_vpc_stack:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Provision network infrastructure
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file iac/cloudformation/vpc-stack.yml \
              --tags project=wordpress-project \
              --stack-name "wordpress-vpc-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://iac/cloudformation/vpc-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - notify_on_failure
      - destroy_vpc_stack_environment

  deploy_rds_stack:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Provision Database Instance
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file iac/cloudformation/rds-stack.yml \
              --tags project=wordpress-project \
              --stack-name "wordpress-rds-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --parameter-overrides \
                DBInstanceIdentifier=${DB_INSTANCE_IDENTIFIER} \
                DBName=${DB_DATABASE} \
                MasterUsername=${DB_USERNAME} \
                MasterUserPassword=${DB_PASSWORD}

      - notify_on_failure
      - destroy_rds_stack_environment

  get_rds_endpoint:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility to have workflow workspace capability
          command: |
            yum install -y tar gzip
      - run:
          name: Get Database Instance Endpoint and save in a vaiable
          command: |
            export DB_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier ${DB_INSTANCE_IDENTIFIER} \
            --query 'DBInstances[*].Endpoint.Address' \
            --output text)

            echo DB_HOST=${DB_ENDPOINT} > .env
            cat .env

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.env

      - notify_on_failure
      - destroy_rds_stack_environment

  deploy_eks_stack:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Set up Kubernetes Cluster
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file iac/cloudformation/eks-stack.yml \
              --tags project=wordpress-project \
              --stack-name "wordpress-eks-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://iac/cloudformation/eks-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

      - notify_on_failure
      - destroy_eks_stack_environment

# BUILD APPLICATION
  build_app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_docker_compose_cli
      - install_awscli
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - run:
          name: Start docker-compose and verify service(s)
          command: |
            docker compose up -d
            docker ps

# TEST APPLICATION
      # - run :
      #     name: Verify if app is reachable using http
      #     command: |
      #       PORT=8080
      #       RETRY_COUNT=0

      #       while true; do
      #           curl http://localhost:$PORT
      #           if [ $? -eq 0 ]; then
      #               echo "App is reachable"
      #               break
      #           else
      #               RETRY_COUNT=$((RETRY_COUNT+1))
      #               if [ $RETRY_COUNT -eq 3 ]; then
      #                   echo "App is not reachable after $RETRY_COUNT retries. Exiting with error."
      #                   exit 1
      #               else
      #                   echo "App is not reachable. Waiting 5 seconds before trying again..."
      #                   sleep 5
      #               fi
      #           fi
      #       done
      #       cat .env

# PUSH APPLICATION TO DOCKER REGISTRY
      - run:
          name: Push to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
            docker tag "$WORDPRESS_IMAGE:${WORDPRESS_VERSION}" "$DOCKER_USERNAME/$WORDPRESS_IMAGE"
            docker push "$DOCKER_USERNAME/$WORDPRESS_IMAGE"
            cat .env

      - notify_on_failure

# DEPLOY APPLICATION
  deploy_app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_kubectl
      - attach_workspace:
          at: ~/
# To ensure flexibility and portability in this demo project, 
# the placeholders within the manifest are substituted with the desired values. 
# This approach avoids the need to hardcode the image name directly in the manifest file.
      - run:
          name: Create mysql-rds service manifest
          command: 
            cat operations/mysql-rds/demo-mysql-rds-service.yml.template |\
               sed "s|RDS_DB_HOST|$DB_HSOT|g" > operations/mysql-rds/mysql-rds-service.yml

      - run:
          name: Create wordpress deployment manifest
          command: |
            VERSION=latest
            cat operations/wordpress/demo-wordpress-deployment.yml.template |\
               sed "s|DOCKER_USER|$DOCKER_USERNAME|g;\
                s|DOCKER_IMAGE|$WORDPRESS_IMAGE|g;\
                s|IMAGE_VERSION|$VERSION|g;\
                s|RDS_DB_USERNAME|$DB_USERNAME|g;\
                s|RDS_DB_PASSWORD|$DB_PASSWORD|g;\
                s|RDS_DB_NAME|$DB_NAME|g" > operations/wordpress/wordpress-deployment.yml

      - run:
          name: Deloy to AWS EKS
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name wordpress-eks-stack-${CIRCLE_WORKFLOW_ID:0:7}-cluster
            kubectl apply -f operations/mysql-rds/mysql-rds-service.yml
            kubectl apply -f operations/wordpress/wordpress-service.yml
            kubectl apply -f operations/wordpress/wordpress-pvc.yml
            kubectl apply -f operations/wordpress/wordpress-deployment.yml
            kubectl get deploymennts
            
      - notify_on_failure

# APPLICATION HEALTH CHECKS
  check_health_status:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_kubectl
      - attach_workspace:
          at: ~/
      - run:
          name: Check Health Status of WordPress Deployment
          command: |
            # Function to check if the deployment is healthy
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name wordpress-eks-stack-${CIRCLE_WORKFLOW_ID:0:7}-cluster

            check_health() {
                local deployment="$1"
                local attempts=0
                local max_attempts=30

                # Wait for 30 seconds with 1-second intervals to check deployment health
                while [[ $attempts -lt $max_attempts ]]; do
                    local health_status=$(kubectl get deployment "$deployment" -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
                    if [[ "$health_status" == "True" ]]; then
                        echo "Deployment $deployment is healthy."
                        return 0
                    fi
                    sleep 1
                    attempts=$((attempts + 1))
                done

                # Deployment is still not healthy after 30 seconds, fail the process
                echo "Deployment $deployment is not healthy after 30 seconds. Process failed."
                exit 1
            }

            # Watch deployments and break if not healthy
            watch_deployments() {
                while true; do
                    kubectl get deployments -w | while read -r line; do
                        # Check if the line contains the deployment name
                        if [[ "$line" == *"wordpress-deployment"* ]]; then
                            echo "$line"
                            check_health "wordpress-deployment"
                        fi
                    done
                done
            }

            # Start watching deployments
            watch_deployments

      - notify_on_failure

# APPLICATION SMOKE TEST
  smoke_test:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_kubectl
      - attach_workspace:
          at: ~/
      - run:
          name: Application Smoke Test
          command: |
            set -e

            url="${URL}"

            echo "Performing smoke test for WordPress app..."

            response=$(curl -s -o /dev/null -w "%{http_code}" $url)

            if [ $response -eq 200 ]; then
              echo "Smoke test passed!"
            else
              echo "Smoke test failed!"
              exit 1
            fi

      - notify_on_failure

# APPLICATION DEPENDENCY VULNERABILITY TEST
  vulnerability_test:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_kubectl
      - attach_workspace:
          at: ~/
      - run:
          name: Application Dependency Vulnerability Test
          command: |
            set -e

            url="${URL}"

            echo "Enter the URL of the WordPress site you want to scan:"
            # read url

            echo "Scanning $url for vulnerabilities..."

            if ! wpscan --url $url --enumerate vp --plugins-detection mixed --no-color; then
              echo "Scan failed!"
              exit 1
            fi

            echo "Scan completed successfully!"
      
      - notify_on_failure

# BLUE-GREEN DEPLOYMENT
  undeploy_older_version:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_kubectl
      - attach_workspace:
          at: ~/
      - run:
          name: Delete old version of Application from AWS EKS CLUSTER
          command: |
            kubectl delete deployment ${BLUE_APP}

      - notify_on_failure
          
  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: success_tagged_deployment_1

workflows:
  wordpress-workflow:
    jobs:
      - syntax_validation
      # - deploy_vpc_stack:
      #     requires: [syntax_validation]
      # - deploy_rds_stack:
      #     requires: [deploy_vpc_stack]
      # - get_rds_endpoint:
      #     requires: [deploy_rds_stack]
      # - deploy_eks_stack:
      #     requires: [deploy_vpc_stack]
      # - build_app:
      #     requires: [get_rds_endpoint]      
      # - deploy_app:
          # requires: [deploy_eks_stack, build_app]
      # - check_health_status:
      #     requires: [deploy_app]
